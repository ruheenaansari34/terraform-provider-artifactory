resources:
  - name: GitHubTFProviderRepoJFrogTest
    type: GitRepo
    configuration:
      gitProvider: Partnership_GitHub
      path: jfrog/terraform-provider-artifactory # if path is modified, change the name as well, per Pipelines doc
      branches:
        include: pipelines-test
      buildOn:
        #commit: false
        commit: true
        #pullRequestCreate: true
      #cancelPendingRunsOn:
        #pullRequestUpdate: true
pipelines:
  - name: tf_provider_artifactory
    steps:
      - name: build_and_run_tf_provider
        type: Bash
        configuration:
          priority: 1
          timeoutSeconds: 1200 # 20 minutes
          runtime:
            type: host
#          runtime:
#            type: image
#            image:
#              auto:
#                language: go
#                versions:
#                  - "1.15.2"
          integrations:
            - name: partnersSlack
            - name: gkeEnvVars
            - name: Partnership_GitHub
            - name: PartnershipArtifactory
#          inputSteps:
#            - name: fozzie_gke_jfrog_rt_xray_create
          inputResources:
            - name: GitHubTFProviderRepoJFrogTest
          environmentVariables:
            NEW_RT_PASSWORD: password
        execution:
          onStart:
            - echo "Preparing for work..."
            - ls -al && pwd
          onExecute:
            - apt update
            - apt install -y golang
            - go version
#            - echo "Install Terraform"
#            - sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DA418C88A3219F7B
#            - sudo apt-add-repository "deb [arch=$(dpkg --print-architecture)] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
#            - sudo apt install terraform && terraform -version
#            - add_run_variables gitHubRepoUrl=${res_GitHubTFProviderRepoJFrogTest_gitRepoRepositorySshUrl}
#            - add_run_variables TFProviderRepo=$(echo ${gitHubRepoUrl} | sed -e 's/git@/@/g' -e 's/:/\//g')
#            - add_run_variables repoFolder=$(echo "${res_GitHubTFProviderRepoJFrogTest_gitRepoFullName}" | sed -e 's/.*\///g')
#            - cd ${res_GitHubTFProviderRepoJFrogTest_resourcePath}
#            - echo "Verify the code contents merged feature branch with development branch"
#            #- git branch && ls -al
#            - export PROVIDER_VERSION=$(git tag --sort=-v:refname | head -1 | sed  -n 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\1.\2.\3/p')
#            - export NEXT_PROVIDER_VERSION=$(echo ${PROVIDER_VERSION}| awk -F '.' '{print $1 "." $2 "." $3 +1 }')
#            - echo $PROVIDER_VERSION
#            - echo $NEXT_PROVIDER_VERSION
#            - echo "Rename the build to make it work on Ubuntu"
#            - cat GNUmakefile | sed -e "s/darwin_amd64/linux_amd64/g" > GNUmakefile.tmp
#            - cp GNUmakefile.tmp GNUmakefile && rm GNUmakefile.tmp
#            - cat GNUmakefile
#            - cat sample.tf | sed -e "s/version =.*/version = \"${NEXT_PROVIDER_VERSION}\"/g" > sample.tf.tmp
#            - cp sample.tf.tmp sample.tf && rm sample.tf.tmp
#            - cat sample.tf
            ## try to run Artifactory with docker compose
            - cd ${res_GitHubTFProviderRepoJFrogTest_resourcePath} # since we run it on the host, we need to manually move into the resource path
            - printenv
            - jfrog config show
            - jfrog --version
            - jfrog rt dl fozzie/native-steps/license/artifactory.cluster.license scripts/
            - ls -al && pwd
            - cp scripts/native-steps/license/artifactory.cluster.license scripts/artifactory.lic
#            - container=$(date +%s)
#            - docker run -d -it --name ${container} -i -t -d --rm -v "$(pwd)scripts/artifactory.lic:/artifactory_extra_conf/artifactory.lic:ro" -p 8081:8081 -p 8082:8082 releases-docker.jfrog.io/jfrog/artifactory-pro:7.24.3
#            - docker ps -al
#            - sleep 240
#            - sudo curl http://localhost:8082/router/api/v1/system/health
            #- cd scripts && ./run-artifactory-container.sh
            - >-
              docker run -i -t -d --rm -v "${res_GitHubTFProviderRepoJFrogTest_resourcePath}/scripts/artifactory.lic:/artifactory_extra_conf/artifactory.lic:ro" \
                    -p8081:8081 -p8082:8082 -p8080:8080 releases-docker.jfrog.io/jfrog/artifactory-pro:7.24.3
            - echo "Waiting for Artifactory to start"
            - >-
              until curl -sf -u admin:password http://localhost:8081/artifactory/api/system/licenses/; do
                  printf '.'
                  sleep 4
              done
            - sudo curl http://localhost:8082/router/api/v1/system/health
            - echo "Add variables needed to run Terraform Provider"
            - export ARTIFACTORY_URL="localhost:8082" && echo ${ARTIFACTORY_URL}
            - export ARTIFACTORY_USERNAME=admin
            - export ARTIFACTORY_PASSWORD=password
            - echo "Get cookie to generate Access token"
            - curl --version
            - sleep 240
            - sudo curl http://localhost:8082/router/api/v1/system/health
            - >-
              curl -c - "${ARTIFACTORY_URL}/ui/api/v1/ui/auth/login?_spring_security_remember_me=false" \
                              --header "accept: application/json, text/plain, */*" \
                              --header "content-type: application/json;charset=UTF-8" \
                              --header "x-requested-with: XMLHttpRequest" \
                              -d '{"user":"admin","password":"password","type":"login"}'
            - >-
              export COOKIES=$(curl -c - "${ARTIFACTORY_URL}/ui/api/v1/ui/auth/login?_spring_security_remember_me=false" \
                            --header "accept: application/json, text/plain, */*" \
                            --header "content-type: application/json;charset=UTF-8" \
                            --header "x-requested-with: XMLHttpRequest" \
                            -d '{"user":"admin","password":"password","type":"login"}' | grep FALSE)
            - export REFRESHTOKEN=$(echo $COOKIES | grep REFRESHTOKEN | awk '{print $7 }')
            - export ACCESSTOKEN=$(echo $COOKIES | grep ACCESSTOKEN | awk '{print $14 }') # awk returns null on Mac, and the actual key on Ubuntu
            - >-
              export ACCESS_KEY=$(curl -g --request GET "${ARTIFACTORY_URL}/ui/api/v1/system/security/token?services[]=all" \
                                  --header "accept: application/json, text/plain, */*" \
                                  --header "x-requested-with: XMLHttpRequest" \
                                  --header "cookie: ACCESSTOKEN=${ACCESSTOKEN}; REFRESHTOKEN=${REFRESHTOKEN}")
            - echo ${COOKIES}
            - echo ${REFRESHTOKEN}
            - echo ${ACCESSTOKEN}
            - echo ${ACCESS_KEY}
            - add_run_variables ARTIFACTORY_ACCESS_TOKEN=${ACCESS_KEY}
            - echo "Unset ARTIFACTORY_PASSWORD, acceptance test will use ARTIFACTORY_ACCESS_TOKEN instead"
            - unset ARTIFACTORY_PASSWORD
            - export TF_ACC=1
            - make acceptance
            - make install
          onSuccess:
            - echo "Success"
            #- send_notification partnersSlack --text "Terraform Provider run is completed. Version ${NEXT_PROVIDER_VERSION}."
          onFailure:
            - echo "Failure"
            #- send_notification partnersSlack --text "Pipeline failed on <${step_url}|${step_name}> step"
          onComplete:
            - echo "Complete"

#      - name: create_pr_to_master_branch
#        type: Bash
#        configuration:
#          integrations:
#            - name: partnersSlack
#            - name: partnership_jfrog_io
#            - name: Partnership_GitHub
#          inputSteps:
#            - name: build_and_run_tf_provider
#          inputResources:
#            - name: GitHubTFProviderRepoJFrog
#        execution:
#          onStart:
#            - echo "Preparing for work..."
#            - echo "Create and push a new tag, associated with the lates changes on develpment branch"
#          onExecute:
#            - printenv
#            - export PR_URL=${res_GitHubTFProviderRepoJFrog_commitUrl}
#            - export PR_COMMITTER=${res_GitHubTFProviderRepoJFrog_committerLogin}
#            - export PR_BRANCH=${res_GitHubTFProviderRepoJFrog_headCommitRef}
#            - export PR_TITLE=${res_GitHubTFProviderRepoJFrog_commitMessage}
#            - >-
#              if [[ "${PR_URL}" == null ]]; then
#                echo "PR was not created (already exists from this head branch?). PR link is empty!"
#                exit 1
#              fi
#          onSuccess:
#            - echo "Success"
#            - send_notification partnersSlack --text "<${res_GitHubTFProviderRepoJFrog_gitRepoRepositoryHttpsUrl}|Terraform Provider>. A new PR was submitted by *${PR_COMMITTER}* - <${PR_URL}|${PR_TITLE}>, branch *${PR_BRANCH}*. Changes tested successfully. <@U01DWTXV01M> please, review and merge."
#          onFailure:
#            - >-
#              if [[ "${PR_URL}" == null ]]; then
#                send_notification partnersSlack --text "${step_name} step is failed. PR was not created (already exists from this head branch?)"
#              else
#                send_notification partnersSlack --text "Pipeline failed on <${step_url}|${step_name}> step"
#              fi
#          onComplete:
#            - echo "Cleaning up"
